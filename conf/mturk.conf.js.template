module.exports =  {

    // ## AWS secret and access.

    accessKeyId: 'YOUR_ACCESS_CODE',
    secretAccessKey: 'YOUR_SECRET',

    // All settings below are optional.

    // Region of the Amazon Web Services to connect to.
    region: 'us-east-1',

    // Qualitification Type Id (Default: none).
    // QualificationTypeId: 'XXXXXXXXXXXXXX',

    // HIT Id (Default: none).
    // HITId: 'XXXXXXXXXXXXXX',

    // Path to a nodeGame installation.
    // Can be absolute path or relative path from root folder of nodegame-mturk.
    // nodeGamePath: 'path/to/nodeGame/',

    // ## Files settings.

    // Path to a default results file. Default: undefined.
    // Leave undefined if you want to specify it via command line or interface.
    // resultsFile: 'path/to/results/file',

    // Path to a default input-codes file. Default: undefined.
    // Leave undefined if you want to specify it via command line or interface.
    // inputCodesFile: 'path/to/input/codes/file',

    // Validation level for results. Default: 2.
    // If < 0, no type checking or interval checking for bonus.
    // validateLevel: 2,

    // Options for loading results csv file.
    // Full list of options: https://github.com/nodeGame/NDDB
    // loadOptions: {
           // How items are separated in the csv file. Default: ','.
           // Note: AMT default separator is ';'.
           // separator: ',',
           // How strings are quoted in the csv file. Default: '"'.
           // quote: '"',
    // },

    // The names of the fields in the results and input db files.
    // Additional fields are allowed, and can be used, for example,
    // by the `filter` function.
    // Values below indicate defaults, uncomment those that you need to change.

    fields: {

    //     // Unique id of the player in nodeGame (optional).
    //     id: 'id',
    //
    //     // Numeric value of the bonus.
    //     bonus: 'bonus',
    //
    //     // Unique id of the worker in AMT.
    //     workerId: 'WorkerId',
    //
    //     // Unique id matching worker to HIT.
    //     assignmentId: 'AssignmentId',
    //
    //     // Id of the task (HIT) shared with all workers who took it.
    //     hitId: 'HITId',
    //
    //     // A truthy value will approve the HIT for the worker.
    //     approve: 'Approve',
    //
    //     // A falsy value will reject the HIT for the worker.
    //     reject: 'Reject',
    //
    //     // The exit code associated to a worker.
    //     // This field is not needed to approve or to give a bonus,
    //     // but it is the proof that the worker reached the end of the task.
    //     // If an input-codes database is given, nodegame-mturk will
    //     // automatically verify the match.
    //     // Note: AMT, names this field after the id of the HTML
    //     // input element inside the MTurk frame.
    //     exitCode: 'exit',
    //
    //     // The access code associated to a worker.
    //     // This field is not needed to approve or to give a bonus,
    //     // but it is usually given by nodeGame to access the task.
    //     accessCode: 'access',
    //
    //     // Flag to indicate if the worker disconnected before
    //     // finishing the task. By default, workers marked as disconnected
    //     // do not receive bonus even when one is set. 
    //     disconnected: 'disconnected',
    //
    //     // The qualification for the worker who took the task.
    //     // Can also be fetched via API.
    //     qualificationTypeId: 'QualificationTypeId',
    //
    //     // A value for the qualification. Default 1.
    //     integerValue: 'IntegerValue',
    //
    //     // A message given to the worker alongside his/her bonus.
    //     reason: 'Reason',
    //
    //     // The assignment status.
    //     // This field is not needed to approve the HIT or send a bonus,
    //     // it is set by AMT with value 'Submitted' to all workers who
    //     // submitted the HIT.
    //     assignmentStatus: 'AssignmentStatus',
    //
    //     // A message that the worker can see alongside his/her status.
    //     // This field is usually needed when the requester need to approve
    //     // a previously rejected assignment.
    //     requesterFeedback: 'RequesterFeedback',
    //
    //     // Sends a notification when a qualification is assigned.
    //     sendNotification: 'SendNotification',
    //
    //     // Unique token for request
    //     uniqueRequestToken: 'UniqueRequestToken'
    },

    // Case of the fields.
    // If TRUE, fields names as written in `fields` are case-insensitive.
    // Note: fast-comparison is executed:, fields are loaded from the first
    // item in the database, and assumed that are identical across all items.
    fieldsCaseInsensitive: true,

    // Callback function to filter items to load from the results file.
    // The return value is coerced to boolean, and if FALSE the item is skipped
    // (and no check is performed) and if TRUE, item is kept.
    // Default: if type is 'bot' or skip is true, item is skipped.
    filter: function(item) {
         if (item.type === 'bot') return false;
         if (item.skip) return false;
         return true;
    },

    // Options below can be overwritten by command-line parameters.

    // ## Safety settings.

    // TRUE if the API should connect to the the Sandbox.
    sandbox: true,

    // Dry-run (no request actually sent to server).
    dry: false,

    // ## Options shared with all workers.

    // Bonus Boundaries (an error will be thrown if bonus is out of boundaries).
    maxBonus: 10, // Default: 10.
    minBonus: 0,  // Default: 0.

    // If TRUE, approve field is set to TRUE for all workers.
    // Otherwise, approve and reject fields need to exist in results file.
    // autoApprove: false,

    // The id of the HIT.
    // This value can be left undefined if not known.
    // HITId: 'XXX',

    // Id of the qualification to assign upon approving/rejecting
    // an assignment. Default: undefined.
    // This value can be fetched via API.
    // QualificationTypeId: 'YYY',

    // ## Technical settings.

    // Turker is notified when a qualification is granted.
    SendNotification: false,

    // Unique token to send for sensitive operations to AMT server.
    // Default: 3000.
    UniqueRequestToken: 1234,

    // Number of attempts to repeat a request if an error occurs.
    nRetries: 0,

    // Waiting time before repeating a failed request.
    retriesInterval: 10000,

    // Waiting time before two consecutive requests in a loop.
    throttleInterval: 500

};
